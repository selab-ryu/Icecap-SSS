<aui:fieldset-group markupView="lexicon">
	<aui:fieldset label="file-array-attrinutes">
		<aui:container>
			<aui:row>
				<aui:col>
					<aui:select name="FileArray_urlType" label="url-type" required="true">
						<aui:option label="file-path" value="path" selected="true"></aui:option>
						<aui:option label="url" value="url"></aui:option>
						<aui:option label="uri" value="uri"></aui:option>
						<aui:option label="doi" value="doi"></aui:option>
					</aui:select>
				</aui:col>
			</aui:row>
			<aui:row>
				<aui:col md="2">
					<aui:input name="FileArray_minLength" value="2" label="minimum-length" helpMessage="array-min-length-help"></aui:input>
				</aui:col>
				<aui:col md="2">
					<aui:input name="FileArray_maxLength" label="maximum-length" helpMessage="array-max-length-help"></aui:input>
				</aui:col>
			</aui:row>
			<aui:row>
				<aui:col md= "6">
					<aui:select name="FileArray_refDataTypes" label="reference-datatypes" helpMessage="file-array-reference-datatypes-help" required="true"></aui:select>
				</aui:col>
			</aui:row>
			<aui:fieldset label="manage-ref-datatypes">
				<aui:row>
					<aui:col md="6">
						<aui:input name="FileArray_dataTypeName" label="data-type-name"></aui:input>
					</aui:col>
					<aui:col md="2">
						<aui:input name="FileArray_dataTypeVersion" label="data-type-version"></aui:input>
					</aui:col>
				</aui:row>
				<aui:button-row>
					<aui:button name="FileArray_addRefDataType" value="add-ref-datatype"></aui:button>
					<aui:button name="FileArray_updateRefDataType" value="update-ref-datatype"></aui:button>
					<aui:button name="FileArray_deleteRefDataType" value="delete-ref-datatype"></aui:button>
				</aui:button-row>
			</aui:fieldset>
		</aui:container>
	</aui:fieldset>
</aui:fieldset-group>

<script>
(function (){
	var refDataTypes = [];
	var selectedDataType;
	var dirty;
	
	var getDataTypeOptionValue = function( dataType ){
		return dataType.name+'_'+dataType.version;	
	}
	
	var getDataTypeOptionText = function( dataType ){
		return dataType.name+' '+dataType.version;	
	}

	var getDataType = function(){
		var dataType = {};
		dataType.name = $('#<portlet:namespace/>FileArray_dataTypeName').val();
		dataType.version = $('#<portlet:namespace/>FileArray_dataTypeVersion').val();
		
		console.log('getDataType: ', dataType );
		return dataType;	
	}
	
	var setDataType = function( dataType){
		$('#<portlet:namespace/>FileArray_dataTypeName').val( dataType.name );
		$('#<portlet:namespace/>FileArray_dataTypeVersion').val( dataType.version );
	}
	
	var updateOption = function( $option, value, text ){
		$option.attr('value',value);
		$option.text( text );
	}
	
	$('#<portlet:namespace/>FileArray_addRefDataType').click( function(){
		var dataType = getDataType();
		
		refDataTypes.push( dataType );
		//console.log( <portlet:namespace/>listItems );
		
		var optionValue = getDataTypeOptionValue(dataType);
		$('#<portlet:namespace/>FileArray_refDataTypes').append(
				'<option value="' + optionValue + '">' +
				dataType.name+' '+dataType.version + '</option>');
		$('#<portlet:namespace/>FileArray_refDataTypes').val( optionValue);
		selectedDataType = dataType;
	});
	
	$('#<portlet:namespace/>FileArray_refDataTypes').change( function(){

		var selectedValue = $('#<portlet:namespace/>FileArray_refDataTypes').val();
		
		if( !selectedValue ){
			return;
		}
		else{
			refDataTypes.forEach( function(dataType){
				
				if( getDataTypeOptionValue(dataType) === selectedValue ){
					selectedDataType = dataType;
					setDataType( dataType );
				}
			});
		}
	});
	
	$('#<portlet:namespace/>FileArray_updateRefDataType').click( function(){
		var changedDataType = getDataType();
		console.log('changedDataType ... ', changedDataType);
		
		var $selectedOption = $('#<portlet:namespace/>FileArray_refDataTypes option:selected');
		
		updateOption( 
				$selectedOption, 
				getDataTypeOptionValue(changedDataType),
				getDataTypeOptionText(changedDataType));
		
		refDataTypes.forEach( function(dataType){
			console.log('Option Value: '+getDataTypeOptionValue(dataType));
			console.log('Changed Option Value: '+getDataTypeOptionValue(changedDataType));
			if( getDataTypeOptionValue(dataType) ===
				 		getDataTypeOptionValue(selectedDataType) ){
				dataType.name = changedDataType.name;
				dataType.version = changedDataType.version;
				selectedDataType = dataType;
			}
		});
		
		console.log( 'Updated refDataTypes.... ', refDataTypes );
	});
	
	$('#<portlet:namespace/>FileArray_deleteRefDataType').click( function(){
		$('#<portlet:namespace/>FileArray_refDataTypes option').remove('option:selected');
		
		var selectedValue = $('#<portlet:namespace/>FileArray_refDataTypes').val();
		
			if( !selectedValue ){
				refDataTypes = [];
				setDataType({name:'', version:''});
			}
			else{
				for( var i=0; i< refDataTypes.length; i++){
					if( refDataTypes[i].value === 
							getDataTypeOptionValue(selectedValue) ){
						SSS.Util.removeArrayElement( refDataTypes, i );
						break;
					}
				}
			}
		
		$('#<portlet:namespace/>FileArray_refDataTypes').trigger('change');
	});
}());
</script>