/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package osp.icecap.sss.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

import osp.icecap.sss.model.Term;
import osp.icecap.sss.model.TermModel;
import osp.icecap.sss.model.TermSoap;

/**
 * The base model implementation for the Term service. Represents a row in the &quot;SSS_Term&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TermModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TermImpl}.
 * </p>
 *
 * @author Jerry H. Seo, Won Cheol Ryu
 * @see TermImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TermModelImpl extends BaseModelImpl<Term> implements TermModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a term model instance should use the <code>Term</code> interface instead.
	 */
	public static final String TABLE_NAME = "SSS_Term";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"termId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"name", Types.VARCHAR},
		{"version", Types.VARCHAR}, {"type_", Types.VARCHAR},
		{"displayName", Types.VARCHAR}, {"definition", Types.VARCHAR},
		{"tooltip", Types.VARCHAR}, {"synonyms", Types.VARCHAR},
		{"standardized", Types.BOOLEAN}, {"attributesJSON", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("termId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("definition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tooltip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("synonyms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("standardized", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("attributesJSON", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SSS_Term (uuid_ VARCHAR(75) null,termId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,name VARCHAR(75) null,version VARCHAR(75) null,type_ VARCHAR(75) null,displayName STRING null,definition STRING null,tooltip STRING null,synonyms VARCHAR(75) null,standardized BOOLEAN,attributesJSON TEXT null)";

	public static final String TABLE_SQL_DROP = "drop table SSS_Term";

	public static final String ORDER_BY_JPQL = " ORDER BY term.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SSS_Term.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long NAME_COLUMN_BITMASK = 4L;

	public static final long STATUS_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Term toModel(TermSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Term model = new TermImpl();

		model.setUuid(soapModel.getUuid());
		model.setTermId(soapModel.getTermId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setType(soapModel.getType());
		model.setDisplayName(soapModel.getDisplayName());
		model.setDefinition(soapModel.getDefinition());
		model.setTooltip(soapModel.getTooltip());
		model.setSynonyms(soapModel.getSynonyms());
		model.setStandardized(soapModel.isStandardized());
		model.setAttributesJSON(soapModel.getAttributesJSON());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Term> toModels(TermSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Term> models = new ArrayList<Term>(soapModels.length);

		for (TermSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TermModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _termId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTermId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _termId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Term.class;
	}

	@Override
	public String getModelClassName() {
		return Term.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Term, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Term, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Term, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Term)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Term, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Term, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Term)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Term, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Term, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Term>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Term.class.getClassLoader(), Term.class, ModelWrapper.class);

		try {
			Constructor<Term> constructor =
				(Constructor<Term>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Term, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Term, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Term, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Term, Object>>();
		Map<String, BiConsumer<Term, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Term, ?>>();

		attributeGetterFunctions.put("uuid", Term::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Term, String>)Term::setUuid);
		attributeGetterFunctions.put("termId", Term::getTermId);
		attributeSetterBiConsumers.put(
			"termId", (BiConsumer<Term, Long>)Term::setTermId);
		attributeGetterFunctions.put("groupId", Term::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Term, Long>)Term::setGroupId);
		attributeGetterFunctions.put("companyId", Term::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Term, Long>)Term::setCompanyId);
		attributeGetterFunctions.put("userId", Term::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Term, Long>)Term::setUserId);
		attributeGetterFunctions.put("userName", Term::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Term, String>)Term::setUserName);
		attributeGetterFunctions.put("createDate", Term::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Term, Date>)Term::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Term::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Term, Date>)Term::setModifiedDate);
		attributeGetterFunctions.put("status", Term::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Term, Integer>)Term::setStatus);
		attributeGetterFunctions.put("name", Term::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Term, String>)Term::setName);
		attributeGetterFunctions.put("version", Term::getVersion);
		attributeSetterBiConsumers.put(
			"version", (BiConsumer<Term, String>)Term::setVersion);
		attributeGetterFunctions.put("type", Term::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<Term, String>)Term::setType);
		attributeGetterFunctions.put("displayName", Term::getDisplayName);
		attributeSetterBiConsumers.put(
			"displayName", (BiConsumer<Term, String>)Term::setDisplayName);
		attributeGetterFunctions.put("definition", Term::getDefinition);
		attributeSetterBiConsumers.put(
			"definition", (BiConsumer<Term, String>)Term::setDefinition);
		attributeGetterFunctions.put("tooltip", Term::getTooltip);
		attributeSetterBiConsumers.put(
			"tooltip", (BiConsumer<Term, String>)Term::setTooltip);
		attributeGetterFunctions.put("synonyms", Term::getSynonyms);
		attributeSetterBiConsumers.put(
			"synonyms", (BiConsumer<Term, String>)Term::setSynonyms);
		attributeGetterFunctions.put("standardized", Term::getStandardized);
		attributeSetterBiConsumers.put(
			"standardized", (BiConsumer<Term, Boolean>)Term::setStandardized);
		attributeGetterFunctions.put("attributesJSON", Term::getAttributesJSON);
		attributeSetterBiConsumers.put(
			"attributesJSON",
			(BiConsumer<Term, String>)Term::setAttributesJSON);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTermId() {
		return _termId;
	}

	@Override
	public void setTermId(long termId) {
		_termId = termId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getDisplayName() {
		if (_displayName == null) {
			return "";
		}
		else {
			return _displayName;
		}
	}

	@Override
	public String getDisplayName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDisplayName(languageId);
	}

	@Override
	public String getDisplayName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDisplayName(languageId, useDefault);
	}

	@Override
	public String getDisplayName(String languageId) {
		return LocalizationUtil.getLocalization(getDisplayName(), languageId);
	}

	@Override
	public String getDisplayName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDisplayName(), languageId, useDefault);
	}

	@Override
	public String getDisplayNameCurrentLanguageId() {
		return _displayNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDisplayNameCurrentValue() {
		Locale locale = getLocale(_displayNameCurrentLanguageId);

		return getDisplayName(locale);
	}

	@Override
	public Map<Locale, String> getDisplayNameMap() {
		return LocalizationUtil.getLocalizationMap(getDisplayName());
	}

	@Override
	public void setDisplayName(String displayName) {
		_displayName = displayName;
	}

	@Override
	public void setDisplayName(String displayName, Locale locale) {
		setDisplayName(displayName, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDisplayName(
		String displayName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(displayName)) {
			setDisplayName(
				LocalizationUtil.updateLocalization(
					getDisplayName(), "DisplayName", displayName, languageId,
					defaultLanguageId));
		}
		else {
			setDisplayName(
				LocalizationUtil.removeLocalization(
					getDisplayName(), "DisplayName", languageId));
		}
	}

	@Override
	public void setDisplayNameCurrentLanguageId(String languageId) {
		_displayNameCurrentLanguageId = languageId;
	}

	@Override
	public void setDisplayNameMap(Map<Locale, String> displayNameMap) {
		setDisplayNameMap(displayNameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDisplayNameMap(
		Map<Locale, String> displayNameMap, Locale defaultLocale) {

		if (displayNameMap == null) {
			return;
		}

		setDisplayName(
			LocalizationUtil.updateLocalization(
				displayNameMap, getDisplayName(), "DisplayName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDefinition() {
		if (_definition == null) {
			return "";
		}
		else {
			return _definition;
		}
	}

	@Override
	public String getDefinition(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDefinition(languageId);
	}

	@Override
	public String getDefinition(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDefinition(languageId, useDefault);
	}

	@Override
	public String getDefinition(String languageId) {
		return LocalizationUtil.getLocalization(getDefinition(), languageId);
	}

	@Override
	public String getDefinition(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDefinition(), languageId, useDefault);
	}

	@Override
	public String getDefinitionCurrentLanguageId() {
		return _definitionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDefinitionCurrentValue() {
		Locale locale = getLocale(_definitionCurrentLanguageId);

		return getDefinition(locale);
	}

	@Override
	public Map<Locale, String> getDefinitionMap() {
		return LocalizationUtil.getLocalizationMap(getDefinition());
	}

	@Override
	public void setDefinition(String definition) {
		_definition = definition;
	}

	@Override
	public void setDefinition(String definition, Locale locale) {
		setDefinition(definition, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDefinition(
		String definition, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(definition)) {
			setDefinition(
				LocalizationUtil.updateLocalization(
					getDefinition(), "Definition", definition, languageId,
					defaultLanguageId));
		}
		else {
			setDefinition(
				LocalizationUtil.removeLocalization(
					getDefinition(), "Definition", languageId));
		}
	}

	@Override
	public void setDefinitionCurrentLanguageId(String languageId) {
		_definitionCurrentLanguageId = languageId;
	}

	@Override
	public void setDefinitionMap(Map<Locale, String> definitionMap) {
		setDefinitionMap(definitionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDefinitionMap(
		Map<Locale, String> definitionMap, Locale defaultLocale) {

		if (definitionMap == null) {
			return;
		}

		setDefinition(
			LocalizationUtil.updateLocalization(
				definitionMap, getDefinition(), "Definition",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getTooltip() {
		if (_tooltip == null) {
			return "";
		}
		else {
			return _tooltip;
		}
	}

	@Override
	public String getTooltip(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTooltip(languageId);
	}

	@Override
	public String getTooltip(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTooltip(languageId, useDefault);
	}

	@Override
	public String getTooltip(String languageId) {
		return LocalizationUtil.getLocalization(getTooltip(), languageId);
	}

	@Override
	public String getTooltip(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTooltip(), languageId, useDefault);
	}

	@Override
	public String getTooltipCurrentLanguageId() {
		return _tooltipCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTooltipCurrentValue() {
		Locale locale = getLocale(_tooltipCurrentLanguageId);

		return getTooltip(locale);
	}

	@Override
	public Map<Locale, String> getTooltipMap() {
		return LocalizationUtil.getLocalizationMap(getTooltip());
	}

	@Override
	public void setTooltip(String tooltip) {
		_tooltip = tooltip;
	}

	@Override
	public void setTooltip(String tooltip, Locale locale) {
		setTooltip(tooltip, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTooltip(
		String tooltip, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(tooltip)) {
			setTooltip(
				LocalizationUtil.updateLocalization(
					getTooltip(), "Tooltip", tooltip, languageId,
					defaultLanguageId));
		}
		else {
			setTooltip(
				LocalizationUtil.removeLocalization(
					getTooltip(), "Tooltip", languageId));
		}
	}

	@Override
	public void setTooltipCurrentLanguageId(String languageId) {
		_tooltipCurrentLanguageId = languageId;
	}

	@Override
	public void setTooltipMap(Map<Locale, String> tooltipMap) {
		setTooltipMap(tooltipMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTooltipMap(
		Map<Locale, String> tooltipMap, Locale defaultLocale) {

		if (tooltipMap == null) {
			return;
		}

		setTooltip(
			LocalizationUtil.updateLocalization(
				tooltipMap, getTooltip(), "Tooltip",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getSynonyms() {
		if (_synonyms == null) {
			return "";
		}
		else {
			return _synonyms;
		}
	}

	@Override
	public void setSynonyms(String synonyms) {
		_synonyms = synonyms;
	}

	@JSON
	@Override
	public boolean getStandardized() {
		return _standardized;
	}

	@JSON
	@Override
	public boolean isStandardized() {
		return _standardized;
	}

	@Override
	public void setStandardized(boolean standardized) {
		_standardized = standardized;
	}

	@JSON
	@Override
	public String getAttributesJSON() {
		if (_attributesJSON == null) {
			return "";
		}
		else {
			return _attributesJSON;
		}
	}

	@Override
	public void setAttributesJSON(String attributesJSON) {
		_attributesJSON = attributesJSON;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Term.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Term.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> displayNameMap = getDisplayNameMap();

		for (Map.Entry<Locale, String> entry : displayNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> definitionMap = getDefinitionMap();

		for (Map.Entry<Locale, String> entry : definitionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> tooltipMap = getTooltipMap();

		for (Map.Entry<Locale, String> entry : tooltipMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDisplayName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Term.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String displayName = getDisplayName(defaultLocale);

		if (Validator.isNull(displayName)) {
			setDisplayName(
				getDisplayName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDisplayName(
				getDisplayName(defaultLocale), defaultLocale, defaultLocale);
		}

		String definition = getDefinition(defaultLocale);

		if (Validator.isNull(definition)) {
			setDefinition(getDefinition(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDefinition(
				getDefinition(defaultLocale), defaultLocale, defaultLocale);
		}

		String tooltip = getTooltip(defaultLocale);

		if (Validator.isNull(tooltip)) {
			setTooltip(getTooltip(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTooltip(getTooltip(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Term toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TermImpl termImpl = new TermImpl();

		termImpl.setUuid(getUuid());
		termImpl.setTermId(getTermId());
		termImpl.setGroupId(getGroupId());
		termImpl.setCompanyId(getCompanyId());
		termImpl.setUserId(getUserId());
		termImpl.setUserName(getUserName());
		termImpl.setCreateDate(getCreateDate());
		termImpl.setModifiedDate(getModifiedDate());
		termImpl.setStatus(getStatus());
		termImpl.setName(getName());
		termImpl.setVersion(getVersion());
		termImpl.setType(getType());
		termImpl.setDisplayName(getDisplayName());
		termImpl.setDefinition(getDefinition());
		termImpl.setTooltip(getTooltip());
		termImpl.setSynonyms(getSynonyms());
		termImpl.setStandardized(isStandardized());
		termImpl.setAttributesJSON(getAttributesJSON());

		termImpl.resetOriginalValues();

		return termImpl;
	}

	@Override
	public int compareTo(Term term) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), term.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Term)) {
			return false;
		}

		Term term = (Term)obj;

		long primaryKey = term.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TermModelImpl termModelImpl = this;

		termModelImpl._originalUuid = termModelImpl._uuid;

		termModelImpl._originalGroupId = termModelImpl._groupId;

		termModelImpl._setOriginalGroupId = false;

		termModelImpl._originalCompanyId = termModelImpl._companyId;

		termModelImpl._setOriginalCompanyId = false;

		termModelImpl._originalUserId = termModelImpl._userId;

		termModelImpl._setOriginalUserId = false;

		termModelImpl._setModifiedDate = false;

		termModelImpl._originalStatus = termModelImpl._status;

		termModelImpl._setOriginalStatus = false;

		termModelImpl._originalName = termModelImpl._name;

		termModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Term> toCacheModel() {
		TermCacheModel termCacheModel = new TermCacheModel();

		termCacheModel.uuid = getUuid();

		String uuid = termCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			termCacheModel.uuid = null;
		}

		termCacheModel.termId = getTermId();

		termCacheModel.groupId = getGroupId();

		termCacheModel.companyId = getCompanyId();

		termCacheModel.userId = getUserId();

		termCacheModel.userName = getUserName();

		String userName = termCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			termCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			termCacheModel.createDate = createDate.getTime();
		}
		else {
			termCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			termCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			termCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		termCacheModel.status = getStatus();

		termCacheModel.name = getName();

		String name = termCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			termCacheModel.name = null;
		}

		termCacheModel.version = getVersion();

		String version = termCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			termCacheModel.version = null;
		}

		termCacheModel.type = getType();

		String type = termCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			termCacheModel.type = null;
		}

		termCacheModel.displayName = getDisplayName();

		String displayName = termCacheModel.displayName;

		if ((displayName != null) && (displayName.length() == 0)) {
			termCacheModel.displayName = null;
		}

		termCacheModel.definition = getDefinition();

		String definition = termCacheModel.definition;

		if ((definition != null) && (definition.length() == 0)) {
			termCacheModel.definition = null;
		}

		termCacheModel.tooltip = getTooltip();

		String tooltip = termCacheModel.tooltip;

		if ((tooltip != null) && (tooltip.length() == 0)) {
			termCacheModel.tooltip = null;
		}

		termCacheModel.synonyms = getSynonyms();

		String synonyms = termCacheModel.synonyms;

		if ((synonyms != null) && (synonyms.length() == 0)) {
			termCacheModel.synonyms = null;
		}

		termCacheModel.standardized = isStandardized();

		termCacheModel.attributesJSON = getAttributesJSON();

		String attributesJSON = termCacheModel.attributesJSON;

		if ((attributesJSON != null) && (attributesJSON.length() == 0)) {
			termCacheModel.attributesJSON = null;
		}

		return termCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Term, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Term, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Term, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Term)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Term, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Term, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Term, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Term)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Term>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _termId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _name;
	private String _originalName;
	private String _version;
	private String _type;
	private String _displayName;
	private String _displayNameCurrentLanguageId;
	private String _definition;
	private String _definitionCurrentLanguageId;
	private String _tooltip;
	private String _tooltipCurrentLanguageId;
	private String _synonyms;
	private boolean _standardized;
	private String _attributesJSON;
	private long _columnBitmask;
	private Term _escapedModel;

}